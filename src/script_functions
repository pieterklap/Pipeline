#!/bin/bash

    ##Start## "comet"
comet ()
{

    # check where comet is installed
    PIDcomet=$(grep Comet "$LOC"install_locations | awk '{print $2}')

    if [ ! -f $PIDcomet ]; then
        echo -e "\n Error " $PIDcomet " is not a file  \n" | tee -a "$datelog"
        exit 1
    fi

    # run comet 
    "$PIDcomet" -P"$PIDparam" "$PIDinput" |& tee -a "$datelog"

    if [[ $COMEToutput == "" ]]; then
        COMEToutput=$(echo $STout*.xml)
        VALinput=$(echo $STout*.xml | awk -F/ '{print $NF}')
    fi

    mv "$COMEToutput" "$PIDoutput"

    PIDoutput=$(echo $PIDoutput/$VALinput)

    ##End## "comet"
}
    ##Start## "comet2pin"
comet2pin ()
{
    
    sed 's/output_pepxmlfile = 1/output_pepxmlfile = 0/' "$PIDparam" > "$PIDparam"".temp"
    sed 's/output_percolatorfile = 0/output_percolatorfile = 1/' "$PIDparam"".temp" > "$PIDparam"".percolator"
    
    rm "$PIDparam"".temp"
    PIDparam="$PIDparam"".percolator"
    
    COMEToutput=$(echo $STout*.pin)
    VALinput=$(echo $STout*.pin | awk -F/ '{print $NF}')
    
    ##End## "comet2pin"
}
    ##Start## "End"
End ()
{
    
    echo "$0 is done runnig"
    
    echo -e "\nEnd time: " >> "$datelog"
    date -I'seconds' >> "$datelog"
    
    End_Seconds=$(date +%s)
    
    Total_Time=$(($End_Seconds-$Start_Seconds))
    
    echo "Total seconds: $Total_Time" | tee -a $datelog
    
    ##End## "End"
}
    ##Start## "gprofiler"
gprofiler ()
{
    
    EXTENTION=$(echo $VALoutput | awk -F\. '{print $(NF-1)"."$NF}')
    NAMEfile=$(echo $VALoutput | sed "s/$EXTENTION/json/")
    #NAMEfile=$(echo "$VALoutput"".json")
    
    if [[ $EXTENTION == pep.xml ]]; then
        # takes the protein names out of the pep.xml file (peptideprophet)
        PROTEIN=$(cat $VALoutput | grep "<search_hit" | awk -F\| '{print "\"" $2 "\"""\,"}')
    fi
    if [[ $EXTENTION == put.xml ]]; then
        #takes the protein names out of the put.xml file (percolator)
        PROTEIN=$(cat $VALoutput | grep "<protein_id>" | awk -F"|" '{print "\"" $2 "\"""\,"}')
    fi
    
    #removes the last "," from $PROTEIN
    PROTEIN=$(echo $PROTEIN | head -c-2)
    #saves the protein list
    echo $PROTEIN > $NAMEfile.prot
    
    if [[ $GPparams == "" ]]; then
        GPparams="X"
    fi
    
    GPparams=$(grep -v "^#" $GPparams |grep -v "^ " | awk '{print $1":",$2","}' | grep -v "^:")
    
    if [[ $GPparams == "" ]]; then
        # if no parameters were given it sets it to the default values
        GPparams="\"organism\": \"hsapiens\","
    fi
    
    GPparams=$(echo "{$GPparams \"query\": [$PROTEIN]}")
    
    
    # calls the gost API
    curl -v \
    -o "$NAMEfile" \
    -X 'POST' \
    -H 'Content-Type: application/json' \
    -d  "$GPparams" 'https://biit.cs.ut.ee/gprofiler_beta/api/gost/profile/' |& tee -a $datelog
    
    ##End## "gprofiler"
}
    ##Start## "idconvert"
idconvert ()
{
    idconvert=$(grep idconvert "$LOC"install_locations | awk '{print $2}')
    EXTENTION=$(echo "$PIDoutput" |awk -F. '{print $NF}')
    
    IDCONVoutput=$(echo $PIDoutput | awk -F/ '{$NF="";print $0}' | tr " " "/")
    
    $idconvert $PIDoutput --pepXML -o $IDCONVoutput |& tee -a "$datelog"
    
    PIDoutput=$(echo $PIDoutput | sed "s/$EXTENTION//")
    mv $PIDoutput"pepXML" $PIDoutput"pep.xml"
    PIDoutput=$PIDoutput"pep.xml"
    
    ##End## "idconvert"
}
    ## Start ## "MSFragger"
    
    #input:     mzML
    Extention=$(echo $PIDinput | awk -F. '{print $NF}')
    Fraggerout=$(echo $PIDinput | sed "s/$Extention/pepXML/")
    PIDMSFragger=$(grep MSFragger "$LOC"install_locations | awk '{print $2}')
    
    MemUse=$(grep "^#Mem_Use" $PIDparam | awk '{print $2}')
    
    if [[ $MemUse == "" ]]; then
        MemUse="4G"
    fi
    
    
    java -Xmx"$MemUse" -jar $PIDMSFragger $PIDparam $PIDinput
    
    NAMEfragerout=$(echo $Fraggerout | awk -F/ '{print NF}' | sed "s/pepXML/pep.xml/")
    PIDoutput="$PIDoutput/$NAMEfraggerout
    
    mv $Fraggerout $PIDoutput 
    
    #output:    pep.xml
    
    
    
    #percolator:    crux pep.xml to pin
    
    ## End ## "MSFragger"
    ##Start## "MSGF2percolator"
MSGF2percolator ()
{
    
    #   Change decoy search to 0
    cat $PIDparam | sed 's/\-tda 1/\-tda 0/' > $LOC.MSGFparam.temp
    PIDparam=$PIDparam".per"
    cat $LOC.MSGFparam.temp > $PIDparam
    
    #   make a separate parameter file with a decoy fasta file named [name].decoy.fasta
    cat $PIDparam | sed 's/\.fasta/\.decoy\.fasta/' > $LOC.MSGFparam.temp
    cat $LOC.MSGFparam.temp > $PIDparam".decoy"
    
    PIDparam_decoy=$PIDparam".decoy"
    
    rm $LOC.MSGFparam.temp
    ##End## "MSGF2percolator"
}
    ##Start## "msgf2pin"
msgf2pin ()
{
    
    
    EXTENTION=$(echo "$PIDoutput" |awk -F. '{print $NF}')
    
    MSGFoutput_decoy=$(echo "$PIDoutput" | sed "s/.$EXTENTION/.decoy.mzid/")
    
    
    MSGFparam=$(grep -v "^#" $PIDparam_decoy |awk '{print $2,$3}' |tr "\n" " ")
    
    java -Xmx3500M -jar $PIDMSGF -s $PIDinput -o $MSGFoutput_decoy $MSGFparam |tee -a "$datelog"
    
    PIDoutput_decoy="$MSGFoutput_decoy"
    
    
    msgf2pin=$(grep msgf2pin "$LOC"install_locations | awk '{print $2}')
    EXTENTION=$(echo "$PIDoutput" |awk -F. '{print $NF}')
    VALinput=$(echo "$PIDoutput" | sed "s/.$EXTENTION/.tsv/")
    
    
    $msgf2pin -o $VALinput $PIDoutput $PIDoutput_decoy |& tee -a &datelog
    
    PIDoutput=$VALinput
    ##End## "msgf2pin"
}
    ##Start## "MSGFPlus"
MSGFPlus ()
{
    
    MSGFoutput=$(echo "$PIDinput" |awk -F/ '{print $NF}' | tr " " "/")
    EXTENTION=$(echo "$MSGFoutput" |awk -F. '{print $NF}')
    
    MSGFoutput=$(echo "$MSGFoutput" | sed "s/.$EXTENTION/.mzid/")
    
    
    PIDMSGF=$(grep MSGFPlus "$LOC"install_locations | awk '{print $2}')
    
    MSGFparam=$(grep -v "^#" $PIDparam |awk '{print $2,$3}' |tr "\n" " ")
    MemUse=$(grep "^#Mem_Use" $PIDparam | awk '{print $2}')
    
    if [[ $MemUse == "" ]]; then
        MemUse="4G"
    fi
    
    java -Xmx$MemUse -jar $PIDMSGF -s $PIDinput -o $PIDoutput/$MSGFoutput $MSGFparam |& tee -a "$datelog"
    
    PIDoutput="$PIDoutput/$MSGFoutput"
    
    ##End## "MSGFPlus"
}
    ##Start## "options"
options ()
{
    #!/bin/bash
    
    
    # notes the location of the pipeline
    LOC=$(echo "$0" |awk -F/ '{$NF="";print $0}' | tr " " "/")
    
    # notes the name of the program
    NAME=$(echo "$0" |awk -F/ '{print $NF}' | tr " " "/")
    NAME=$(echo "$NAME" |awk -F. '{print $1}')
    
    # Shows the help files of the programs in the particular pipeline if no options are given
    # The files are located in scripts/info/
    if [[ $1 == "" ]]; then
        PIDhelp=$(echo $NAME | awk -F_ '{print $1}')
        VALhelp=$(echo $NAME | awk -F_ '{print $2}')
    
        cat "$LOC""info/""$PIDhelp"
        cat "$LOC""info/""$VALhelp"
        exit
    fi
    
    # If the working directory of the user is the directory of the script LOC is $PWD/
    if [[ $LOC == "./" ]]; then
        LOC=$PWD/
    fi
    
    
    while [ "$1" != "" ]; do
        Help="0"
        case $1 in
            -o | --output )         shift               # Enter -o to specify the output location
                                    PIDoutput=$1        # Enter -o to specify the output location
                                    ;;
            -i | --input )          shift               # Enter -i to specify the input location
                                    PIDinput=$1         # Enter -i to specify the input location
                                    ;;
            -p | --parameter )      shift               # Enter -p to specify the paramater locatio
                                    PIDparam=$1
                                    ;;
            -v | --valparameter )   shift
                                    VALparam=$1
                                    ;;
            -g | --gprofiler )      shift
                                    GPparams=$1
                                    ;;
            -l | --logfile )        shift
                                    logfile=$1
                                    ;;
            -h | --help )           PIDhelp=$(echo $NAME | awk -F_ '{print $1}')
                                    VALhelp=$(echo $NAME | awk -F_ '{print $2}')
    
                                    cat "$LOC""info/""$PIDhelp"
                                    cat "$LOC""info/""$VALhelp"
                                    exit
                                    ;;
            -L | --location )       shift
                                    LOC="$1"
                                    ;;
            -I | --installer )      shift
                                    ./installer.sh $@
                                    exit 1              # Exit after the installer han ran
                                    ;;
            * )                     echo " "            # Requires you to anounce input with a - option
                                    echo "Error invalid paramater $1"
                                    echo "$@"
                                    exit
                                    ;;
        esac
        shift
    done
    
    # Create a log file with the date and time
    datelog=$(date -I'seconds')
    datelog=${datelog//":"/"_"}     #changes the ":" to "_" for easier file management
    dateout="$datelog"
    datelog="$logfile"logfile_"$NAME"_"$datelog"    #sets the name of the logfile, default is logfile_(start time)
    
    # adds the start time to the log file
    echo "Start time: " > "$datelog"
    date -I'seconds' >> "$datelog"
    echo " " >> "$datelog"
    Start_Seconds=$(date +%s)
    
    # Tells the user where the logfile is located
    if [[ $logfile == "" ]]; then
        echo -e "\nlogfile is located at $PWD/$datelog\n"
    else
        echo -e "\nlogfile is located at $datelog\n"
    fi
    
    # checks if a parameter file and/or an input file were passed to the script
    if [[ $PIDparam == "" ]]; then
        echo -e "No parameter file given, please enter a parameter file" | tee -a "$datelog"
        EXITstatus="1"
    fi
    if [[ $PIDinput == "" ]]; then
        echo -e  "No input file given, please enter an input file" | tee -a "$datelog"
        EXITstatus="1"
    fi
    # if eiter a parameter file or an input file weren't passed to the script it exits
    if [[ $EXITstatus == "1" ]]; then
        echo -e "$0 \n"
        exit
    fi
    
    # Generates an output if none was given
    if [[ $PIDoutput == "" ]]; then
        STout=$(echo "$PIDinput" |awk -F/ '{$NF="";print $0}' | tr " " "/")
    else
        STout=$PIDoutput
    fi
    
    mkdir "$STout""$NAME" | tee -a "$datelog"   # Will create a directory for the output in the input directory
    PIDoutput="$STout""$NAME"                   # Default output location for the PID
    VALoutput="$STout""$NAME"                   # Default output location for the validator
    
    ##End## "options"
}
    ##Start## "PeptideProphet"
PeptideProphet ()
{
    
    # sets the location of peptideprophet into variable VALprog
    VALprog=$(grep PeptideProphet "$LOC"install_locations | awk '{print $2}')
    EXTENTION=$(echo $PIDoutput | awk -F. '{print $(NF-1)"."$NF}')
    
    if [[ $EXTENTION == "pep.xml" ]]; then
        copy_PIDoutput=$(echo $PIDoutput | sed "s/\.$EXTENTION/_database_search\.$EXTENTION/")
        cp $PIDoutput $copy_PIDoutput
    fi
    
    
    VALparam=$(grep -v "^#" $VALparam | awk '{print $1}' | tr "\n" " ")
    
    # runs peptideprophet
    $VALprog $PIDoutput $VALparam | tee -a "$datelog"
    
    VALoutput=$PIDoutput
    
    ##End## "PeptideProphet"
}
    ##Start## "percolator"
percolator ()
{
    
    
    #	run Percolator
    
    percolator=$(grep percolator "$LOC"install_locations | awk '{print $2}')
    
    EXTENTION=$(echo $PIDoutput | awk -F. '{print $NF}')
    VALoutput=$(echo $PIDoutput | sed "s/$EXTENTION/put.xml/")
    TSVoutput=$(echo $PIDoutput | sed "s/$EXTENTION/tsv/")
    
    VALparam=$(grep -v "^#" $VALparam | awk '{print $1, $2}' | tr "\n" " ")
    
    
    $percolator -X $VALoutput $VALparam $PIDoutput >$TSVoutput 2>> $datelog
    
    #	convert pin.xml to pep.xml with psmconvert
    
    # psmconvert $VALoutput
    ##End## "percolator"
}
    ##Start## "tandem2pin"
tandem2pin ()
{
    
    # create an extra parameter file with the decoy fasta
    PIDparam_decoy=$PIDparam".decoy"
    
    sed 's/taxon">human/taxon">human_decoy/' $PIDparam > $PIDparam_decoy
    
    # run tandem with the decoy
    
    $XTprog $PIDparam_decoy |& tee -a $datelog
    
    PIDoutput_decoy=$(ls -t "$STout""$NAME"/* |head -n1)
    
    
    # t.xml to tab delimited file with tandem2pin
    
    tandem2pin=$(grep tandem2pin "$LOC"install_locations | awk '{print $2}')
    EXTENTION=$(echo $PIDoutput |awk -F\. '{print $NF}')
    VALinput=$(echo $PIDoutput | sed "s/$EXTENTION/pin/")
    
    $tandem2pin -o $VALinput $PIDoutput $PIDoutput_decoy |& tee -a $datelog
    
    PIDoutput=$VALinput
    
    ##End## "tandem2pin"
}
    ##Start## "Tandem2XML"
Tandem2XML ()
{
    
    # Sets the name of the output file to {file}.pep.xml
    VALinput=${PIDoutput//.xml/.pep.xml}
    
    # Location of Tandem2XMl
    T2XML=$(grep Tandem2XML "$LOC"install_locations | awk '{print $2}')
    
    # runs Tandem2XML
    $T2XML $PIDoutput $VALinput |& tee -a "$datelog"
    
    # sets PIDoutput to be used in peptideprophet
    PIDoutput="$VALinput"
    
    ##End## "Tandem2XML"
}
    ##Start## "Triqler"
Triqler ()
{
    # check where Triqler is installed
    PIDtriqler=$(grep Triqler "$LOC"install_locations | awk '{print $2}')
    
    $PIDtriqler
    ##End## "Triqler"
}
    ##Start## "Xtandem"
Xtandem ()
{
    
    # Stes the location of tandem into a variable
    XTloc=$(grep "Tandem " "$LOC"install_locations | awk '{print $2}')
    # if the given location isn't a file try to find tandem.
    if [ ! -f $XTloc ]; then
    	XTloc=$(locate -n1 tandem.exe | head -c-15)
    	if [ ! -f $XTloc ]; then
    		echo $XTloc is not a file
    		exit
    	fi
    fi
    
    # sets the program location to XTloc
    XTprog=$XTloc
    # changes XTloc to the directory of tandem.exe
    XTloc=$(echo "$XTloc" |awk -F/ '{$NF="";print $0}' | tr " " "/")
    
    #XTfasta=$(echo "$XTloc""fasta/" )
    #TAXON=$(head -n1 $XTfasta |awk '{print $1}'| awk -F_ '{print $2}')
    
    # input.xml
    # creates varable to be able t be used in sed
    mkdir "$LOC".tandemtemp
    inputXT=${PIDinput//\//\\/}        # sets backslashes in front of forward slashes for use with sed
    outputXT=${PIDoutput//\//\\/}      # sets backslashes in front of forward slashes for use with sed
    
    XTbin=$(echo "$PIDparam" |awk -F/ '{$NF="";print $0}' | tr " " "/")
    
    
    # Changes the paths in the input.xml file
    
    sed "s/\"spectrum, path\".*/\"spectrum, path\">$inputXT<\/note>/" "$PIDparam" > "$LOC".tandemtemp/input.xml # Changes the input path to the reque$
    
    sed "s/\"output, path\".*/\"output, path\">$outputXT\/output.xml<\/note>/" "$LOC".tandemtemp/input.xml > "$PIDparam"  # Changes the output path to$
    
    # run Xtandem
    $XTprog $PIDparam |& tee -a "$datelog"
    
    # remove the temporary directory
    rm -fr "$LOC".tandemtemp/
    
    PIDoutput=$(ls -t $PIDoutput/* |head -n1)
    ##End## "Xtandem"
}
