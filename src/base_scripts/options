#!/bin/bash

#SBATCH -J Script_Name_shark_cluster
#$ -N Script_Name_shark_cluster

##Start## "options"

Run_info=$(echo -e "\nrunning $0 with the following arguments: \n$@\n")

# notes the location of the pipeline
LOC=$(echo "$0" |awk -F/ '{$NF="";print $0}' | tr " " "/")

# notes the name of the program
NAME="Script_Name_shark_cluster"

# If the working directory of the user is the directory of the script LOC is $PWD/
if [[ $LOC == "./" ]]; then
    LOC=$PWD/
fi

if [[ $1 == "" ]]; then
    Start_Help="yes"
fi

#   -XX:CompressedClassSpaceSize=1G -XX:+UseCompressedOops -XX:+UseCompressedClassPointers
#   Argument to pass to java except for Xmx, which is always used and taken from the parameter file.
JavaOptions="-XX:CompressedClassSpaceSize=1G -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XshowSettings:vm"

NUMinput="0"

while [ "$1" != "" ]; do
    Help="0"
    case $1 in
        -o | --output )         shift               # Enter -o to specify the output location
                                DSSoutput=$1        # Enter -o to specify the output location
                                ;;
        -i | --input )          while [[ ${2:0:1} != "-" ]] && [[ "$2" != "" ]]; do
                                    shift
                                    DSSinput+="$1 "             # Puts the input locations in a variable
                                    NUMinput=$[$NUMinput+1]     # Counts the amount of input files entered
                                done
                                ;;
        -p | --parameter )      shift               # Enter -p to specify the database search paramater file location
                                DSSparam=$1         # Enter -p to specify the database search paramater file location
                                ;;
        -v | --valparameter )   while [[ ${2:0:1} != "-" ]] && [[ "$2" != "" ]]; do
                                    shift                           # Enter -v to specify the Statistical validator parameter file location
                                    VALparameters+="$1 "            # Enter -v to specify the Statistical validator parameter file location
                                    NUMVALparam=$[$NUMVALparam+1]   # Counts the amount of parameter files entered
                                done
                                ;;
        -a | --anaparameter )   while [[ ${2:0:1} != "-" ]] && [[ "$2" != "" ]]; do
                                    shift                           # Enter -v to specify the Statistical validator parameter file location
                                    ANAparameters+="$1 "            # Enter -v to specify the Statistical validator parameter file location
                                    NUMANAparam=$[$NUMANAparam+1]   # Counts the amount of parameter files entered
                                done
                                ;;
        -l | --logfile )        shift               # Enter -l to specify the Logfile location
                                logfile=$1          # Enter -l to specify the Logfile location
                                ;;
        -h | --help )           Start_Help="yes"
                                ;;
        -L | --location )       shift       # gives the location of the install_locations file to the script
                                LOC="$1"    # required if the install_locations file is not in the same folder as the script when it is executed
                                ;;
        -s | --output_suffix )  shift           # overwrites teh output suffix in the parameter file
                                output_suffix=$1
                                ;;
        -m | --mode )           shift                               # not inplemented yet do not use or do your call
                                if [[ ${1,,} == "parralel" ]]; then
                                    Parallel_Run="1"
                                fi
                                if [[ ${1,,} == "series" ]]; then
                                    Series_Run="1"
                                fi
                                ;;
        --separate )            Separate_TD_search="yes"            # not inplemented yet do not use or do your call
                                ;;
        * )                     echo " "                            # Requires you to anounce input with a - option
                                echo "Error invalid paramater $1"   # Tells the use wich parameter was invalid
                                echo "$@"                           # Shows the remaining parameters
                                exit
                                ;;
    esac
    shift
done

if [[ $NUMinput == "1" ]]; then
    DSSinput=$(echo $DSSinput | awk '{print $1}')
fi

# Shows the help files of the programs in the particular pipeline if no options are given
if [[ $Start_Help == "yes" ]]; then

    LOC_Help_Functions=LOChelp_to_be_replacedsrc/help_functions.sh

    DSShelp=DSShelp_to_be_replaced_Help
    VALhelp=VALhelp_to_be_replaced_Help

    if [ -f $LOC_Help_Functions ]; then
        source $LOC_Help_Functions

        $DSShelp
        $VALhelp
        exit
    else
        echo -e "\e[91mERROR:\e[0m can not find the help files,\n       $LOC_Help_Functions is not a file"
        exit
    fi
fi

for input_file in $DSSinput
do
    if [ ! -f ${input_file} ]; then
        echo -e "\e[91mERROR:\e[0m ${input_file} is not a file."
        exit
    fi
done


# Create a log file with the date and time
if [[ $logfile != "" ]]; then
    datelog=$(date -I'seconds')
    datelog=${datelog//":"/"_"}     #changes the ":" to "_" for easier file management
    dateout=$datelog
    datelog="$logfile"logfile_"$NAME"_$datelog    #sets the name of the logfile, default is logfile_(start time)
    datelog_tee="\| tee -a datelog"
fi

echo -e "$Run_info" | tee $datelog

# adds the start time to the log file
echo "Start time: " | tee -a $datelog
date -I'seconds' | tee -a $datelog
echo " " | tee -a $datelog
Start_Seconds=$(date +%s)

# Tells the user where the logfile is located
if [[ $datelog != "" ]]; then
    echo -e "\nlogfile is located at $datelog\n"
fi

# checks if a parameter file and/or an input file were passed to the script
if [[ $DSSparam == "" ]]; then
    echo -e "No parameter file given, please enter a parameter file" | tee -a $datelog
    EXITstatus="1"
fi
if [[ $DSSinput == "" ]]; then
    echo -e  "No input file given, please enter an input file" | tee -a $datelog
    EXITstatus="1"
fi
# if either a parameter file or an input file were not passed to the script it exits
if [[ $EXITstatus == "1" ]]; then
    echo -e "$0 \n"
    exit
fi

# Generates an output if none was given
if [[ $DSSoutput == "" ]]; then
    STout=$(echo "$DSSinput" | awk '{print $1}' | awk -F/ '{$NF="";print $0}' | tr " " "/")
else
    STout=$DSSoutput
fi

if [ ! -d "$STout""$NAME" ]; then
    mkdir -v "$STout""$NAME" | tee -a $datelog   # Will create a directory for the output in the input directory
fi
DSSoutput="$STout""$NAME"                   # Default output location for the DSS
Stand_output="$DSSoutput"
#VALoutput="$STout""$NAME"                   # Default output location for the validator


##End## "options"
