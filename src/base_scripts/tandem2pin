##Start## "tandem2pin"

CONVprog=$(grep "tandem2pin " "$LOC"install_locations | awk '{print $2}')
if [[ $CONVprog == "" ]] || [ ! -f $CONVprog ]; then
    echo -e "\e[93mWARNING:\e[0m The location of tandem2pin is not given or does not exist"
    CONVprog=$(command -v tandem2pin)
    if [[ $CONVprog == "" ]]; then
        echo -e "\e[91mERROR:\e[0m tandem2pin was not found. \nexiting"
        exit
    else
        echo -e "\e[92mRunning:\e[0m $CONVprog"
    fi
fi

EXTENTION=$(echo $DSSoutput |awk -F\. '{print $NF}')

if [[ "$Separate_TD_search" == "yes" ]]; then

#   create an extra parameter file with the decoy fasta
    DSSparam_decoy=${DSSparam//.xml/_decoy.xml}
    TAXON=$(grep "protein, taxon" $DSSparam | awk -F\> '{print $2}' | awk -F\< '{print $1}')
    sed 's/taxon">$TAXON/taxon">$TAXON_decoy/' $DSSparam > $DSSparam_decoy

    for input in $DSSinput
    do
    #   input.xml
    #   creates varable to be able t be used in sed
        inputXT=${input//\//\\/}        # sets backslashes in front of forward slashes for use with sed
        outputXT=${Stand_output//\//\\/}      # sets backslashes in front of forward slashes for use with sed

    #   Changes the paths in the input.xml file
    #   Sets the input path
        sed -i "s/\"spectrum, path\">.*</\"spectrum, path\">$inputXT</" "$DSSparam_decoy"
    #   changes the extention of the input file and adds the output suffix to create the output file name
        NAME_input=$(echo ${input} | awk -F\/ '{print $NF}' | awk -F\. '{$NF="";print $0}' | tr " " "." | head -c-2)
        NAME_input="decoy_$NAME_input$output_suffix.t.xml"
    #   Sets the output path/name
        sed -i "s/\"output, path\">.*</\"output, path\">$outputXT\/$NAME_input</" "$DSSparam_decoy"

    #   run Tandem
        $DSSprog $DSSparam_decoy |& tee -a $datelog

        DSSoutput_decoy+="$Stand_output/$NAME_input "
    done

    for Pep_file in $DSSoutput
    do
        CONVoutput=$(echo ${Pep_file} | sed "s/$EXTENTION/pin/")
        Decoy_run=$(echo $DSSoutput_decoy | awk '{print $1}')

        $CONVprog -o $CONVoutput ${Pep_file} $Decoy_run |& tee -a $datelog

        DSSoutput_decoy=$(echo $DSSoutput_decoy | awk '{$1="";print $0}')

        VALinput+="$CONVoutput "
    done
else

    for Pep_file in $DSSoutput
    do
        CONVoutput=$(echo ${Pep_file} | sed "s/$EXTENTION/pin/")

        $CONVprog -o $CONVoutput -P $decoy_prefix ${Pep_file} |& tee -a $datelog

    #   Check VALinput for decoy sequences
        if [[ "$(awk '{if($2==-1) print $2}' $CONVoutput)" == "" ]]; then
            echo -e "\e[93mWARNING:\e[0m no decoys found in $CONVoutput fixing errors made by tandem2pin" | tee -a $datelog
        #   changes the label column to -1 if the first protien hit was from a decoy protein, making it a decoy
            Decoy_check_output="$(awk -v decoy=$decoy_prefix '{if($21~decoy) $2=-1;print $0}' $CONVoutput | tr " " "\t")"
            echo "$Decoy_check_output" > $CONVoutput
        #   Notifies the user if decoys were detected. if no decoys were detected percolator will most likely not run to completion
            if [[ "$(awk '{if($2==-1) print $2}' $CONVoutput)" == "" ]]; then
                echo -e "\e[93mWARNING:\e[0m No decoy's were found we recomend you run a separate target decoy search for Tandem" | tee -a $datelog
            else
                echo -e "\e[93mWARNING:\e[0m decoy(s) detected. Be sure to check your data files if the decoy(s) were corerctly detected" | tee -a $datelog
            fi
        fi

        VALinput+="$CONVoutput "
    done
fi

for output in $VALinput
do
# if the file is not found and/or empty it is removed from the $VALinput it exits if $VALinput is empty
    if [ -f ${output} ]; then
        if [ ! -s ${output} ]; then
            echo -e "\e[91mERROR:\e[0m ${output} is empty \nsomething went wrong running $CONVprog" | tee -a $datelog
            VALinput=${VALinput//${output}/}
        fi
    else
        echo -e "\e[91mERROR:\e[0m ${output} is not a file \nsomething went wrong running $CONVprog" | tee -a $datelog
        VALinput=${VALinput//${output}/}
    fi
done
if [[ $VALinput == "" ]]; then
    echo -e "\e[91mERROR:\e[0m no output files found"
    exit
fi

##End## "tandem2pin"
